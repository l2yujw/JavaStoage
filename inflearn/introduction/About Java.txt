* 인텔리제이를 통한 자바 컴파일, 실행 과정

    * 컴파일
        - 자바 코드를 컴파일 하려면 javac 라는 프로그램을 직접 사용해야 하는데, 인텔리제이는 자바 코드를 실행할 때 이 과정을 자동으로 처리해준다.
            예) javac Hello.java
        - 인텔리제이 화면에서 프로젝트에 있는 out 폴더에 가보면 컴파일된 .class 파일이 있는 것을 확인할 수 있다.
    * 실행
        자바를 실행하려면 java 라는 프로그램을 사용해야 한다. 이때 컴파일된 .class 파일을 지정해주면 된다.
            예) java Hello , 참고로 확장자는 제외한다.
    * 인텔리제이에서 자바 코드를 실행하면 컴파일과 실행을 모두 한번에 처리한다.
    * 인텔리제이 덕분에 매우 편리하게 자바 프로그램을 개발하고, 학습할 수 있다

* 자바 개발과 운영 환경
    - 개발할 때 자바와 서버에서 실행할 때 다른 자바를 사용할 수 있다.
    - 개발자들은 개발의 편의를 위해서 윈도우나 MAC OS를 주로 사용한다.
    - 서버는 주로 리눅스를 사용한다. 만약 AWS를 사용한다면 Amazon Corretto 자바를 AWS 리눅스 서버에 설치하면 된다.
    - 자바의 운영체제 독립성 덕분에 각각의 환경에 맞추어 자바를 설치하는 것이 가능하다

* 변수 명명 규칙
    - 자바에서 변수의 이름을 짓는데는 규칙과 관례가 있다.
    - 규칙은 필수이다. 규칙을 지키지 않으면 컴파일 오류가 발생한다.
    - 관례는 필수는 아니지만 전세계 개발자가 해당 관례를 따르기 때문에 사실상 규칙이라고 생각해도 된다.

    * 규칙
        - 변수 이름은 숫자로 시작할 수 없다. (예: 1num , 1st )
            @ 그러나 숫자를 이름에 포함하는 것은 가능하다 (예: myVar1 , num1 ).
        - 이름에는 공백이 들어갈 수 없다.
        - 자바의 예약어를 변수 이름으로 사용할 수 없다. (예: int , class , public )
        - 변수 이름에는 영문자( a-z , A-Z ), 숫자( 0-9 ), 달러 기호( $ ) 또는 밑줄( _ )만 사용할 수 있다.

    * 관례
        - 소문자로 시작하는 낙타 표기법
            @ 변수 이름은 소문자로 시작하는 것이 일반적이다. 여러 단어로 이루어진 변수 이름의 경우, 첫 번째 단어는 소문자로 시작하고
              그 이후의 각 단어는 대문자로 시작하는 낙타 표기법(camel case)를 사용한다. (예:orderDetail , myAccount )
        - 낙타표기법
            @ 낙타표기법(Camel Case)은 프로그래밍에서 변수, 함수, 클래스 등의 이름을 지을 때 많이 사용하는 표기법 중 하나이다.
              이 표기법의 이름은 작성한 이름이 여러 단어로 구성되어 있을 때, 각 단어의 첫 글자가 대문자로 시작하고,
              이 대문자들이 낙타의 등봉처럼 보이는 것에서 유래했다.
              낙타표기법을 사용하면 이름에 공백을 넣지 않고도 여러 단어를 쉽게 구분할 수 있으므로, 변수의 이름을 이해하기 쉽게 만들어준다.
              또한, 대부분의 프로그래밍 언어에서는 이름에 공백을 포함할 수 없기 때문에, 낙타표기법은 이런 제한을 우회하는 좋은 방법이다.

    * 자바 언어의 관례 한번에 정리
        - 클래스는 대문자로 시작, 나머지는 소문자로 시작
            @ 자바에서 클래스 이름의 첫 글자는 대문자로 시작한다. 그리고 나머지는 모두 첫 글자를 소문자로 시작한다.
              여기에 낙타 표기법을 적용하면 된다. 이렇게 하면 모든 자바 관례를 다 외울 수 있다!
        - 예시: 클래스는 첫 글자 대문자, 나머지는 모두 첫 글자 소문자로 시작 + 낙타 표기법
            @ 클래스: Person , OrderDetail
            @ 변수를 포함한 나머지: firstName , userAccount
        - 여기에 예외가 딱 2개 있다.
            @ 상수는 모두 대문자를 사용하고 언더바로 구분한다. (상수는 뒤에서 학습)
                # USER_LIMIT
            @ 패키지는 모두 소문자를 사용한다. (패키지는 뒤에서 학습)
                # org.spring.boot

    * 참고: 변수 이름은 의미있고, 그 용도를 명확하게 설명해야 한다.
        - a , b : 이런 변수는 용도를 설명하지 않는다. 단순한 예제에서만 사용하는 것이 좋다.
        - studentCount , maxScore , userAccount , orderCount : 용도를 명확하게 설명한다