* 지네릭스 => 다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입체크를 해주는 기능
    1. 타입의 안정성을 제공
    2. 타입체크와 형변환을 생략할 수 있으므로 코드가 간결해짐

    class Box<T>{
        T item;
        void setItem(T item){
            this.item = item;
        }

        T getItem(){
            return item;
        }
    }

    Box<String> box = new Box<String>()
    box.setItem("ABC");

    // 이런식으로 변환됌
    class Box<String>{
        String item;
        void setItem(String item){
            this.item = item;
        }

        String getItem(){
            return item;
        }
    }

    - Box<T>    => 지네릭 클래스 / 'T의 Box' 또는 'T Box'
    - T         => 타입 변수 또는 타입 매개변수
    - Box       => 원시타입

    - <? extends T> => 와일드카드의 상한 제한 / T와 그 자손들만 가능
    - <? super T>   => 와일드카드의 하한 제한 / T와 그 조상들만 가능
    - <?>           => 제한 없음 / 모든 타입이 가능

* 지네릭 메서드
    static <T> void sort(List<T> list, Comparator<? super T> c)
    ! 지네릭 클래스에 정의된 타입 매개변수와 지네릭 메서드에 정의된 타입 매개변수는 전혀 별개의 것임

    static Juice makeJuice(FruitBox<? extends Fruit> box){
        return new Juice(tmp);
    }
    =>
    static <T extends Fruit> Juice makeJuice(FruitBox<T> box){
        return new Juice(tmp);
    }